{"version":3,"sources":["index.js"],"names":["Square","props","className","status","onClick","value","Board","state","squares","Array","fill","xIsNext","i","this","slice","calculateWinner","setState","handleClick","board","row","j","push","renderSquare","winner","renderBoard","React","Component","Game","lines","res","col1","col2","row1","row2","calculateLines","length","a","b","c","d","e","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4d07c70.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n        <button\n            className={props.status ? 'square ' + props.status : 'square unclicked'}\n            onClick={() => props.onClick()}\n        >\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(225).fill(null),\n            xIsNext: true,\n        };\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.state.squares[i]}\n                status={!!this.state.squares[i] ? 'clicked-' + this.state.squares[i] : null}\n                onClick={() => this.handleClick(i)}\n            />\n        );\n    }\n\n    renderBoard() {\n        const board = [];\n        for (let i = 0; i < 15; i++) {\n            let row = [];\n            for (let j = i * 15; j < 15 * (i + 1); j++) {\n                row.push(this.renderSquare(j));\n            }\n            board.push(<div className=\"board-row\">{row}</div>);\n        }\n        return board;\n    }\n\n    render() {\n        const winner = calculateWinner(this.state.squares);\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div>\n                <div className=\"status\">{status}</div>\n                {this.renderBoard()}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n                <div className=\"game-info\">\n                    <div>{/* status */}</div>\n                    <ol>{/* TODO */}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateLines() {\n    const res = [];\n    for (let i = 0; i < 15; i++) {\n        // get winning row lines\n        for (let j = i * 15; j <= i * 15 + 10; j++) {\n            res.push([j, j+1, j+2, j+3, j+4]);\n        }\n        // get winning col lines\n        for (let j = i; j <= i + 150; j += 15) {\n            res.push([j, j+15, j+30, j+45, j+60]);\n        }\n        // get winning diag lines\n        for (let j = 0; j <= 11 - i; j++) {\n            let col1 = i + 16 * j;\n            res.push([col1, col1+16, col1+32, col1+48, col1+64]);\n            let col2 = 14 * (j + 1) - i;\n            res.push([col2, col2+14, col2+28, col2+42, col2+56]);\n            let row1 = 15 * i + 16 * j;\n            res.push([row1, row1+16, row1+32, row1+48, row1+64]);\n            let row2 = 15 * i + 14 * (j + 1);\n            res.push([row2, row2+14, row2+28, row2+42, row2+56]);\n        }\n    }\n    return res;\n}\n\nfunction calculateWinner(squares) {\n    const lines = calculateLines();\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c, d, e] = lines[i];\n        if (\n            squares[a] &&\n            squares[a] === squares[b] &&\n            squares[a] === squares[c] &&\n            squares[a] === squares[d] &&\n            squares[a] === squares[e]\n        ) {\n            return squares[a];\n        }\n    }\n    return null;\n}"],"sourceRoot":""}