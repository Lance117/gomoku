{"version":3,"sources":["utils.js","index.js"],"names":["L","makeDiags","start","n","d","res","i","push","counter","arr","count","forEach","x","calculateLines","j","row","k","col","col1","col2","row1","row2","calculateWinner","squares","LINES","length","every","four","line","map","straightFour","SIXES","slice","three","sLine","SEVENS","sLine1","sLine2","count1","count2","s","sl","filter","brokenThree","Square","props","name","sqState","isWinner","lastMove","className","cur-piece","curPiece","onClick","value","Restart","title","modalMsg","mode","Modal","isOpen","modal","toggle","ModalHeader","ModalBody","ModalFooter","Button","color","reset","Board","state","Array","fill","xIsNext","winner","spotsOccupied","openModal","selectedMode","this","setState","key","toString","includes","handleClick","board","renderSquare","window","setTimeout","move","minPlayer","Infinity","status","alertColor","thinking","Alert","Spinner","size","renderBoard","e","React","Component","Game","terminal","actions","threatSpace","checkRow","checkCol","util","utility","found","xActionUtil","result","oActionUtil","Math","max","abs","sort","a","b","action","player","bt","t","f","sf","maxPlayer","alpha","beta","depth","curActs","v","minVal","maxVal","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.44700dde.chunk.js","sourcesContent":["export const L = 15;\n\nconst makeDiags = (start, n, d) => {\n    const res = [];\n    for (let i = 0; i < n; i++) {\n        res.push(start + i * d)\n    }\n    return res;\n}\n\nconst counter = (arr) => {\n    let count = {};\n    arr.forEach(x => count[x] = (count[x] || 0) + 1);\n    return count;\n}\n\nexport const calculateLines = (n) => {\n    const res = [];\n    for (let i = 0; i < L; i++) {\n        // row lines\n        for (let j = i * L; j <= i * L + L - n; j++) {\n            const row = [];\n            for (let k = 0; k < n; k++) {\n                row.push(j + k);\n            }\n            res.push(row);\n        }\n        // col lines\n        for (let j = i; j <= i + L * (L - n); j += L) {\n            const col = [];\n            for (let k = 0; k < n; k++) {\n                col.push(j + L * k);\n            }\n            res.push(col);\n        }\n        // diag lines\n        for (let j = 0; j < L - n + 1 - i; j++) {\n            const d1 = L + 1;\n            const d2 = L - 1;\n            let col1 = i + d1 * j;\n            let col2 = d2 * (j + 1) - i;\n            let row1 = L * i + d1 * j;\n            let row2 = L * i + d2 * (j + 1);\n            res.push(makeDiags(col1, n, d1));\n            res.push(makeDiags(col2, n, d2));\n            res.push(makeDiags(row1, n, d1));\n            res.push(makeDiags(row2, n, d2));\n        }\n    }\n    return res;\n}\n\nexport const calculateWinner = (squares) => {\n    for (let i = 0; i < LINES.length; i++) {\n        if (squares[LINES[i][0]] && LINES[i].every( (x, i, arr) => squares[x] === squares[arr[0]])) {\n            return [squares[LINES[i][0]], LINES[i]]\n        }\n    }\n    return null;\n}\n\nexport const four = (squares) => {\n    const res = [0, 0];\n    for (let i = 0; i < LINES.length; i++) {\n        const line = LINES[i].map(x => squares[x]);\n        const count = counter(line);\n        if (count['X'] === 4 && count[null] === 1) {\n            res[0] += 1;\n        } else if (count['O'] === 4 && count[null] === 1) {\n            res[1] += 1;\n        }\n    }\n    return res;\n}\n\nexport const straightFour = (squares) => {\n    const res = [0, 0];\n    for (let i = 0; i < SIXES.length; i++) {\n        const line = SIXES[i];\n        const slice = line.slice(1, 5);\n        const isFour = squares[slice[0]] && slice.every((x, i, arr) => squares[x] === squares[arr[0]]);\n        if (isFour && !(squares[line[0]] || squares[line[5]])) {\n            if (squares[slice[0]] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n        }\n    }\n    return res;\n}\n\nexport const three = (squares) => {\n    const res = [0, 0];\n    for (let i = 0; i < SEVENS.length; i++) {\n        const line = SEVENS[i];\n        const sLine = line.map(x => squares[x]);\n        const sLine1 = sLine.slice(0, 6);\n        const sLine2 = sLine.slice(1, 7);\n        const count = counter(sLine);\n        const count1 = counter(sLine1);\n        const count2 = counter(sLine2);\n        const slice = sLine.slice(2, 5);\n        const isThree = slice[0] && slice.every(x => x === slice[0]);\n        if (isThree && count[null] === 4) {\n            if (slice[0] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n            continue;\n        }\n        for (let s of [sLine1, sLine2]) {\n            const sl = s.slice(1, 5);\n            const counter = s === sLine1 ? count1 : count2;\n            if (counter[null] === 3 && sl.filter(x => x === sl[1]).length === 3 && (!(sl[0] && sl[4]))) {\n                if (sl[1] === 'X') {\n                    res[0] += 1;\n                } else if (sl[1] === 'O') {\n                    res[1] += 1;\n                }\n                break;\n            }\n        }\n    }\n    return res;\n}\n\nexport const brokenThree = (squares) => {\n    const res = [0, 0];\n    for (let i = 0; i < SIXES.length; i++) {\n        const line = SIXES[i];\n        const sLine = line.map(x => squares[x]);\n        const count = counter(sLine);\n        const slice = sLine.slice(1, 5);\n        const isThree = slice[0] && slice[3] && slice.filter(x => x === slice[0]).length === 3;\n        if (isThree && count[null] === 3) {\n            if (slice[0] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n        }\n    }\n    return res;\n}\n\nconst LINES = calculateLines(5);\nconst SIXES = calculateLines(6);\nconst SEVENS = calculateLines(7);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Alert, Button, Modal, ModalHeader, ModalBody, ModalFooter, Spinner } from \"reactstrap\";\nimport { L, calculateWinner, four, straightFour, three, brokenThree } from './utils';\nimport './index.css';\n\n// const RANDTAB = zobrist();\n// const TRANSPOS_TAB = {};\n\nfunction Square(props) {\n    let name = props.sqState ? 'square ' + props.sqState : 'square unclicked';\n    if (props.isWinner) name = name + ' is-winner';\n    if (props.lastMove) name = name + ' last-move';\n    return (\n        <button className={name} cur-piece={props.curPiece} onClick={() => props.onClick()}>\n            {props.value}\n        </button>\n    );\n}\n\nfunction Restart(props) {\n    let title, modalMsg;\n    if (props.mode === 'default') {\n        title = 'Play With a Friend';\n        modalMsg = 'Are you sure you want to restart?';\n    } else if (props.mode === 'ai') {\n        title = 'Play Against Computer';\n        modalMsg = 'Are you sure you want to play against computer?';\n    }\n    return (\n        <Modal isOpen={props.modal} toggle={props.toggle}>\n            <ModalHeader toggle={props.toggle}>{title}</ModalHeader>\n            <ModalBody>\n                {modalMsg}\n            </ModalBody>\n            <ModalFooter>\n                <Button color=\"primary\" onClick={props.reset}>Yes</Button>{' '}\n                <Button color=\"secondary\" onClick={props.toggle}>Cancel</Button>\n            </ModalFooter>\n        </Modal>\n    )\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(L * L).fill(null),\n            xIsNext: true,\n            winner: null,\n            spotsOccupied: 0,\n            openModal: false,\n            mode: 'ai',\n            selectedMode: null,\n            lastMove: null,\n        };\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        if (this.state.winner || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n            winner: calculateWinner(squares),\n            spotsOccupied: this.state.spotsOccupied + 1,\n            lastMove: i\n        });\n        // console.log(utility(squares))\n        // console.log(actions(squares))\n    }\n\n    toggle(mode) {\n        this.setState({openModal: !this.state.openModal, selectedMode: mode});\n    }\n\n    reset(mode) {\n        this.setState({\n            squares: Array(L*L).fill(null),\n            xIsNext: true,\n            winner: null,\n            spotsOccupied: 0,\n            openModal: false,\n            mode: mode,\n            selectedMode: null,\n            lastMove: null\n        })\n    }\n\n    renderSquare(i) {\n        return (\n            <Square\n                key={'square'+i.toString()}\n                curPiece={this.state.xIsNext ? 'X' : 'O'}\n                value={this.state.squares[i]}\n                sqState={!!this.state.squares[i] ? 'clicked-' + this.state.squares[i] : null}\n                isWinner={this.state.winner && this.state.winner[1].includes(i)}\n                lastMove={!this.state.winner && this.state.lastMove === i}\n                onClick={() => this.handleClick(i)}\n            />\n        );\n    }\n\n    renderBoard() {\n        const board = [];\n        for (let i = 0; i < L; i++) {\n            let row = [];\n            for (let j = i * L; j < L * (i + 1); j++) {\n                row.push(this.renderSquare(j));\n            }\n            board.push(<div className=\"board-row\" key={'row'+i.toString()}>{row}</div>);\n        }\n        return board;\n    }\n\n    componentDidUpdate() {\n        if (this.state.mode === 'ai' && !this.state.xIsNext) {\n            window.setTimeout((move) => this.handleClick(aiMove(this.state.squares)), 500);\n        }\n    }\n\n    render() {\n        let status, alertColor;\n        if (this.state.winner) {\n            status = 'Winner: ' + this.state.winner[0];\n            alertColor = this.state.winner[0] === 'X' ? 'success' : 'danger';\n        } else if (this.state.spotsOccupied === L * L) {\n            status = 'Game ended in a draw';\n        } else if (this.state.mode === 'ai' && !this.state.xIsNext) {\n            status = 'Thinking...';\n            alertColor = 'info';\n        } else if (this.state.mode === 'ai') {\n            status = 'Human vs AI: your turn';\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n            alertColor = this.state.xIsNext ? 'info' : 'primary';\n        }\n        const thinking = this.state.mode === 'ai' && !this.state.xIsNext && !this.state.winner;\n\n        return (\n            <div>\n                <Alert color={alertColor}>\n                    {status}\n                    {thinking && <Spinner size=\"sm\" color=\"primary\" />}\n                </Alert>\n                {this.renderBoard()}\n                <div className=\"btn-options\">\n                    <Button color=\"info\" onClick={(e) => this.toggle('ai', e)}>PLAY COMPUTER</Button>{' '}\n                    <Button color=\"primary\" onClick={(e) => this.toggle('default', e)}>PLAY A FRIEND</Button>{' '}\n                </div>\n                <Restart\n                    modal={this.state.openModal}\n                    mode={this.state.selectedMode}\n                    reset={(e) => this.reset(this.state.selectedMode, e)}\n                    toggle={() => this.toggle()}\n                >\n                </Restart>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n                <div className=\"game-info\">\n                    <div>{/* status */}</div>\n                    <ol>{/* TODO */}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction terminal(squares) {\n    return calculateWinner(squares) || !squares.includes(null);\n}\n\nfunction actions(squares) {\n    const res = [];\n    let threatSpace = [];\n    const checkRow = [0, L, -L];\n    const checkCol = [-1, 0, 1];\n    let util = utility(squares);\n    for (let i = 0; i < squares.length; i++) {\n        if (!squares[i]) {\n            let found = false;\n            for (let row of checkRow) {\n                if (found) break;\n                for (let col of checkCol) {\n                    if (((i + 1) % 15 === 0 && col === 1) || (i % 15 === 0 && col === -1)) {\n                        continue;\n                    }\n                    let n = i + row + col;\n                    if (n >= 0 && n < 255 && squares[n]) {\n                        res.push(i);\n                        found = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    for (let i of res) {\n        let xActionUtil = utility(result(squares, i, 'X'));\n        let oActionUtil = utility(result(squares, i, 'O'));\n        if (xActionUtil !== util || oActionUtil !== util) {\n            threatSpace.push([i, Math.max(Math.abs(xActionUtil-util), Math.abs(oActionUtil-util))]);\n        }\n    }\n    threatSpace = threatSpace.sort((a,b) => b[1]-a[1]);\n    // console.log(threatSpace)\n    return threatSpace.length > 0 ? threatSpace.map(x => x[0]).slice(0, 3) : res.slice(0, 3);\n}\n\nfunction result(squares, action, player) {\n    const board = squares.slice();\n    board[action] = player;\n    return board;\n}\n\nfunction utility(squares) {\n    const winner = calculateWinner(squares);\n    if (winner) {\n        return winner[0] === 'X' ? Infinity : -Infinity;\n    } else {\n        let bt, t, f, sf;\n        [bt, t, f, sf] = [brokenThree(squares), three(squares), four(squares), straightFour(squares)];\n        // console.log([bt, t, f, sf])\n        if (f[0] > 0 && t[0] > 1) t[0] -= 2;\n        if (f[1] > 0 && t[1] > 1) t[1] -= 2;\n        return 20 * (bt[0] - bt[1]) + 30 * (t[0] - t[1]) + 89 * (f[0] - f[1]) + 300 * (sf[0] - sf[1]);\n    }\n}\n\nfunction maxPlayer(squares, alpha, beta, depth) {\n    if (terminal(squares) || depth > 2) {\n        return [utility(squares), null];\n    }\n    const curActs = actions(squares);\n    let v = [alpha, curActs[0]];\n    // if (boardHash in TRANSPOS_TAB) return [alpha, TRANSPOS_TAB[boardHash]];\n    for (let action of curActs) {\n        const minVal = minPlayer(result(squares, action, 'X'), v[0], beta, depth + 1);\n        if (minVal[0] > v[0]) {\n            v = [minVal[0], action];\n            if (v[0] >= beta) {\n                break;\n            }\n        }\n    }\n    // TRANSPOS_TAB[boardHash] = v[1];\n    return v;\n}\n\nfunction minPlayer(squares, alpha, beta, depth) {\n    if (terminal(squares) || depth > 2) {\n        return [utility(squares), null];\n    }\n    const curActs = actions(squares);\n    let v = [beta, curActs[0]];\n    // if (boardHash in TRANSPOS_TAB) return [beta, TRANSPOS_TAB[boardHash]];\n    for (let action of curActs) {\n        const maxVal = maxPlayer(result(squares, action, 'O'), alpha, v[0], depth + 1);\n        if (maxVal[0] < v[0]) {\n            v = [maxVal[0], action];\n            // console.log(v)\n            if (alpha >= v[0]) {\n                break;\n            }\n        }\n    }\n    // TRANSPOS_TAB[boardHash] = v[1];\n    return v;\n\n}\n\nfunction aiMove(state) {\n    return minPlayer(state, -Infinity, Infinity, 0)[1];\n}\n\n// function zobrist() {\n//     let res = new Uint32Array(2*L*L);\n//     for (let i = 0; i < res.length; i++) {\n//         res[i] = Math.random() * 4294967296;\n//     }\n//     return res;\n// }\n\n// function hash(state) {\n//     let h = 0;\n//     for (let i = 0; i < state.length; i++) {\n//         if (state[i]) {\n//             const j = state[i] === 'X' ? 0 : 1;\n//             h ^= RANDTAB[i*2+j];\n//         }\n//     }\n//     return h;\n// }\n"],"sourceRoot":""}