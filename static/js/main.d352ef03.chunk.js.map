{"version":3,"sources":["utils.js","index.js"],"names":["L","makeDiags","start","n","d","res","i","push","calculateLines","j","row","k","col","col1","col2","row1","row2","LINES","SIXES","SEVENS","RANDTAB","Uint32Array","length","Math","random","zobrist","TRANSPOS_TAB","Square","props","name","sqState","isWinner","lastMove","className","cur-piece","curPiece","onClick","value","Restart","title","modalMsg","mode","Modal","isOpen","modal","toggle","ModalHeader","ModalBody","ModalFooter","Button","color","reset","Board","state","squares","Array","fill","xIsNext","winner","spotsOccupied","openModal","selectedMode","this","slice","setState","calculateWinner","key","toString","includes","handleClick","board","renderSquare","window","setTimeout","move","minPlayer","Infinity","status","alertColor","thinking","Alert","Spinner","size","renderBoard","e","React","Component","Game","counter","arr","count","forEach","x","every","four","map","straightFour","line","three","sLine","sLine1","sLine2","count1","count2","s","sl","filter","brokenThree","terminal","actions","threatSpace","checkRow","checkCol","util","utility","found","xActionUtil","result","oActionUtil","max","abs","sort","a","b","action","player","bt","t","f","sf","maxPlayer","alpha","beta","depth","hash","boardHash","curActs","v","minVal","maxVal","h","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d352ef03.chunk.js","sourcesContent":["export const L = 15;\n\nconst makeDiags = (start, n, d) => {\n    const res = [];\n    for (let i = 0; i < n; i++) {\n        res.push(start + i * d)\n    }\n    return res;\n}\n\nconst counter = (arr) => {\n    let count = {};\n    arr.forEach(x => count[x] = (count[x] || 0) + 1);\n    return count;\n}\n\nexport const calculateLines = (n) => {\n    const res = [];\n    for (let i = 0; i < L; i++) {\n        // row lines\n        for (let j = i * L; j <= i * L + L - n; j++) {\n            const row = [];\n            for (let k = 0; k < n; k++) {\n                row.push(j + k);\n            }\n            res.push(row);\n        }\n        // col lines\n        for (let j = i; j <= i + L * (L - n); j += L) {\n            const col = [];\n            for (let k = 0; k < n; k++) {\n                col.push(j + L * k);\n            }\n            res.push(col);\n        }\n        // diag lines\n        for (let j = 0; j < L - n + 1 - i; j++) {\n            const d1 = L + 1;\n            const d2 = L - 1;\n            let col1 = i + d1 * j;\n            let col2 = d2 * (j + 1) - i;\n            let row1 = L * i + d1 * j;\n            let row2 = L * i + d2 * (j + 1);\n            res.push(makeDiags(col1, n, d1));\n            res.push(makeDiags(col2, n, d2));\n            res.push(makeDiags(row1, n, d1));\n            res.push(makeDiags(row2, n, d2));\n        }\n    }\n    return res;\n}\n\nexport const calculateWinner = (squares) => {\n    for (let i = 0; i < LINES.length; i++) {\n        if (squares[LINES[i][0]] && LINES[i].every( (x, i, arr) => squares[x] === squares[arr[0]])) {\n            return [squares[LINES[i][0]], LINES[i]]\n        }\n    }\n    return null;\n}\n\nexport const four = (squares) => {\n    const res = [0, 0];\n    for (let i = 0; i < LINES.length; i++) {\n        const line = LINES[i].map(x => squares[x]);\n        const count = counter(line);\n        if (count['X'] === 4 && count[null] === 1) {\n            res[0] += 1;\n        } else if (count['O'] === 4 && count[null] === 1) {\n            res[1] += 1;\n        }\n    }\n    return res;\n}\n\nexport const straightFour = (squares) => {\n    const res = [0, 0];\n    for (let i = 0; i < SIXES.length; i++) {\n        const line = SIXES[i];\n        const slice = line.slice(1, 5);\n        const isFour = squares[slice[0]] && slice.every((x, i, arr) => squares[x] === squares[arr[0]]);\n        if (isFour && !(squares[line[0]] || squares[line[5]])) {\n            if (squares[slice[0]] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n        }\n    }\n    return res;\n}\n\nexport const three = (squares) => {\n    const res = [0, 0];\n    for (let i = 0; i < SEVENS.length; i++) {\n        const line = SEVENS[i];\n        const sLine = line.map(x => squares[x]);\n        const sLine1 = sLine.slice(0, 6);\n        const sLine2 = sLine.slice(1, 7);\n        const count = counter(sLine);\n        const count1 = counter(sLine1);\n        const count2 = counter(sLine2);\n        const slice = sLine.slice(2, 5);\n        const isThree = slice[0] && slice.every(x => x === slice[0]);\n        if (isThree && count[null] === 4) {\n            if (slice[0] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n            continue;\n        }\n        for (let s of [sLine1, sLine2]) {\n            const sl = s.slice(1, 5);\n            const counter = s === sLine1 ? count1 : count2;\n            if (counter[null] === 3 && sl.filter(x => x === sl[1]).length === 3 && (!(sl[0] && sl[4]))) {\n                if (sl[1] === 'X') {\n                    res[0] += 1;\n                } else if (sl[1] === 'O') {\n                    res[1] += 1;\n                }\n                break;\n            }\n        }\n    }\n    return res;\n}\n\nexport const brokenThree = (squares) => {\n    const res = [0, 0];\n    for (let i = 0; i < SIXES.length; i++) {\n        const line = SIXES[i];\n        const sLine = line.map(x => squares[x]);\n        const count = counter(sLine);\n        const slice = sLine.slice(1, 5);\n        const isThree = slice[0] && slice[3] && slice.filter(x => x === slice[0]).length === 3;\n        if (isThree && count[null] === 3) {\n            if (slice[0] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n        }\n    }\n    return res;\n}\n\nexport const LINES = calculateLines(5);\nexport const SIXES = calculateLines(6);\nexport const SEVENS = calculateLines(7);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Alert, Button, Modal, ModalHeader, ModalBody, ModalFooter, Spinner } from \"reactstrap\";\nimport { L, calculateLines } from './utils';\nimport './index.css';\n\nconst LINES = calculateLines(5);\nconst SIXES = calculateLines(6);\nconst SEVENS = calculateLines(7);\nconst RANDTAB = zobrist();\nconst TRANSPOS_TAB = {};\n\nfunction Square(props) {\n    let name = props.sqState ? 'square ' + props.sqState : 'square unclicked';\n    if (props.isWinner) name = name + ' is-winner';\n    if (props.lastMove) name = name + ' last-move';\n    return (\n        <button className={name} cur-piece={props.curPiece} onClick={() => props.onClick()}>\n            {props.value}\n        </button>\n    );\n}\n\nfunction Restart(props) {\n    let title, modalMsg;\n    if (props.mode === 'default') {\n        title = 'Play With a Friend';\n        modalMsg = 'Are you sure you want to restart?';\n    } else if (props.mode === 'ai') {\n        title = 'Play Against Computer';\n        modalMsg = 'Are you sure you want to play against computer?';\n    }\n    return (\n        <Modal isOpen={props.modal} toggle={props.toggle}>\n            <ModalHeader toggle={props.toggle}>{title}</ModalHeader>\n            <ModalBody>\n                {modalMsg}\n            </ModalBody>\n            <ModalFooter>\n                <Button color=\"primary\" onClick={props.reset}>Yes</Button>{' '}\n                <Button color=\"secondary\" onClick={props.toggle}>Cancel</Button>\n            </ModalFooter>\n        </Modal>\n    )\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(L * L).fill(null),\n            xIsNext: true,\n            winner: null,\n            spotsOccupied: 0,\n            openModal: false,\n            mode: 'ai',\n            selectedMode: null,\n            lastMove: null,\n        };\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        if (this.state.winner || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n            winner: calculateWinner(squares),\n            spotsOccupied: this.state.spotsOccupied + 1,\n            lastMove: i\n        });\n    }\n\n    toggle(mode) {\n        this.setState({openModal: !this.state.openModal, selectedMode: mode});\n    }\n\n    reset(mode) {\n        this.setState({\n            squares: Array(L*L).fill(null),\n            xIsNext: true,\n            winner: null,\n            spotsOccupied: 0,\n            openModal: false,\n            mode: mode,\n            selectedMode: null,\n            lastMove: null\n        })\n    }\n\n    renderSquare(i) {\n        return (\n            <Square\n                key={'square'+i.toString()}\n                curPiece={this.state.xIsNext ? 'X' : 'O'}\n                value={this.state.squares[i]}\n                sqState={!!this.state.squares[i] ? 'clicked-' + this.state.squares[i] : null}\n                isWinner={this.state.winner && this.state.winner[1].includes(i)}\n                lastMove={!this.state.winner && this.state.lastMove === i}\n                onClick={() => this.handleClick(i)}\n            />\n        );\n    }\n\n    renderBoard() {\n        const board = [];\n        for (let i = 0; i < L; i++) {\n            let row = [];\n            for (let j = i * L; j < L * (i + 1); j++) {\n                row.push(this.renderSquare(j));\n            }\n            board.push(<div className=\"board-row\" key={'row'+i.toString()}>{row}</div>);\n        }\n        return board;\n    }\n\n    componentDidUpdate() {\n        if (this.state.mode === 'ai' && !this.state.xIsNext) {\n            window.setTimeout((move) => this.handleClick(aiMove(this.state.squares)), 500);\n        }\n    }\n\n    render() {\n        // console.log(actions(this.state.squares))\n        // console.log(utility(this.state.squares))\n        let status, alertColor;\n        if (this.state.winner) {\n            status = 'Winner: ' + this.state.winner[0];\n            alertColor = this.state.winner[0] === 'X' ? 'success' : 'danger';\n        } else if (this.state.spotsOccupied === L * L) {\n            status = 'Game ended in a draw';\n        } else if (this.state.mode === 'ai' && !this.state.xIsNext) {\n            status = 'Thinking...';\n            alertColor = 'info';\n        } else if (this.state.mode === 'ai') {\n            status = 'Human vs AI: your turn';\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n            alertColor = this.state.xIsNext ? 'info' : 'primary';\n        }\n        const thinking = this.state.mode === 'ai' && !this.state.xIsNext && !this.state.winner;\n\n        return (\n            <div>\n                <Alert color={alertColor}>\n                    {status}\n                    {thinking && <Spinner size=\"sm\" color=\"primary\" />}\n                </Alert>\n                {this.renderBoard()}\n                <div className=\"btn-options\">\n                    <Button color=\"info\" onClick={(e) => this.toggle('ai', e)}>PLAY COMPUTER</Button>{' '}\n                    <Button color=\"primary\" onClick={(e) => this.toggle('default', e)}>PLAY A FRIEND</Button>{' '}\n                </div>\n                <Restart\n                    modal={this.state.openModal}\n                    mode={this.state.selectedMode}\n                    reset={(e) => this.reset(this.state.selectedMode, e)}\n                    toggle={() => this.toggle()}\n                >\n                </Restart>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n                <div className=\"game-info\">\n                    <div>{/* status */}</div>\n                    <ol>{/* TODO */}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction counter(arr) {\n    let count = {};\n    arr.forEach(x => count[x] = (count[x] || 0) + 1);\n    return count;\n}\n\nfunction calculateWinner(squares) {\n    for (let i = 0; i < LINES.length; i++) {\n        if (squares[LINES[i][0]] && LINES[i].every( (x, i, arr) => squares[x] === squares[arr[0]])) {\n            return [squares[LINES[i][0]], LINES[i]]\n        }\n    }\n    return null;\n}\n\nfunction four(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < LINES.length; i++) {\n        const line = LINES[i].map(x => squares[x]);\n        const count = counter(line);\n        if (count['X'] === 4 && count[null] === 1) {\n            res[0] += 1;\n        } else if (count['O'] === 4 && count[null] === 1) {\n            res[1] += 1;\n        }\n    }\n    return res;\n}\n\nfunction straightFour(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < SIXES.length; i++) {\n        const line = SIXES[i];\n        const slice = line.slice(1, 5);\n        const isFour = squares[slice[0]] && slice.every((x, i, arr) => squares[x] === squares[arr[0]]);\n        if (isFour && !(squares[line[0]] || squares[line[5]])) {\n            if (squares[slice[0]] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n        }\n    }\n    return res;\n}\n\nfunction three(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < SEVENS.length; i++) {\n        const line = SEVENS[i];\n        const sLine = line.map(x => squares[x]);\n        const sLine1 = sLine.slice(0, 6);\n        const sLine2 = sLine.slice(1, 7);\n        const count = counter(sLine);\n        const count1 = counter(sLine1);\n        const count2 = counter(sLine2);\n        const slice = sLine.slice(2, 5);\n        const isThree = slice[0] && slice.every(x => x === slice[0]);\n        if (isThree && count[null] === 4) {\n            if (slice[0] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n            continue;\n        }\n        for (let s of [sLine1, sLine2]) {\n            const sl = s.slice(1, 5);\n            const counter = s === sLine1 ? count1 : count2;\n            if (counter[null] === 3 && sl.filter(x => x === sl[1]).length === 3 && (!(sl[0] && sl[4]))) {\n                if (sl[1] === 'X') {\n                    res[0] += 1;\n                } else if (sl[1] === 'O') {\n                    res[1] += 1;\n                }\n                break;\n            }\n        }\n    }\n    return res;\n}\n\nfunction brokenThree(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < SIXES.length; i++) {\n        const line = SIXES[i];\n        const sLine = line.map(x => squares[x]);\n        const count = counter(sLine);\n        const slice = sLine.slice(1, 5);\n        const isThree = slice[0] && slice[3] && slice.filter(x => x === slice[0]).length === 3;\n        if (isThree && count[null] === 3) {\n            if (slice[0] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n        }\n    }\n    return res;\n}\n\nfunction terminal(squares) {\n    return calculateWinner(squares) || !squares.includes(null);\n}\n\nfunction actions(squares) {\n    const res = [];\n    let threatSpace = [];\n    const checkRow = [0, L, -L];\n    const checkCol = [-1, 0, 1];\n    let util = utility(squares);\n    for (let i = 0; i < squares.length; i++) {\n        if (!squares[i]) {\n            let found = false;\n            for (let row of checkRow) {\n                if (found) break;\n                for (let col of checkCol) {\n                    let n = i + row + col;\n                    if (n >= 0 && n < 255 && squares[n]) {\n                        res.push(i);\n                        found = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    for (let i of res) {\n        let xActionUtil = utility(result(squares, i, 'X'));\n        let oActionUtil = utility(result(squares, i, 'O'));\n        if (xActionUtil !== util || oActionUtil !== util) {\n            threatSpace.push([i, Math.max(Math.abs(xActionUtil-util), Math.abs(oActionUtil-util))]);\n        }\n    }\n    threatSpace = threatSpace.sort((a,b) => b[1]-a[1]);\n    return threatSpace.length > 0 ? threatSpace.map(x => x[0]).slice(0, 3) : res.slice(0, 3);\n}\n\nfunction result(squares, action, player) {\n    const board = squares.slice();\n    board[action] = player;\n    return board;\n}\n\nfunction utility(squares) {\n    const winner = calculateWinner(squares);\n    if (winner) {\n        return winner[0] === 'X' ? Infinity : -Infinity;\n    } else {\n        let bt, t, f, sf;\n        [bt, t, f, sf] = [brokenThree(squares), three(squares), four(squares), straightFour(squares)];\n        return 15 * (bt[0] - bt[1]) + 25 * (t[0] - t[1]) + 70 * (f[0] - f[1]) + 500 * (sf[0] - sf[1]);\n    }\n}\n\nfunction maxPlayer(squares, alpha, beta, depth) {\n    if (terminal(squares) || depth === 4) {\n        return [utility(squares), null];\n    }\n    const [boardHash, curActs] = [hash(squares), actions(squares)];\n    let v = [alpha, curActs[0]];\n    if (boardHash in TRANSPOS_TAB) return [alpha, TRANSPOS_TAB[boardHash]];\n    for (let action of curActs) {\n        const minVal = minPlayer(result(squares, action, 'X'), v[0], beta, depth + 1);\n        if (minVal[0] > v[0]) {\n            v = [minVal[0], action];\n            if (v[0] >= beta) {\n                break;\n            }\n        }\n    }\n    TRANSPOS_TAB[boardHash] = v[1];\n    return v;\n}\n\nfunction minPlayer(squares, alpha, beta, depth) {\n    if (terminal(squares) || depth === 4) {\n        return [utility(squares), null];\n    }\n    const [boardHash, curActs] = [hash(squares), actions(squares)];\n    let v = [beta, curActs[0]];\n    if (boardHash in TRANSPOS_TAB) return [beta, TRANSPOS_TAB[boardHash]];\n    for (let action of curActs) {\n        const maxVal = maxPlayer(result(squares, action, 'O'), alpha, v[0], depth + 1);\n        if (maxVal[0] < v[0]) {\n            v = [maxVal[0], action];\n            if (alpha >= v[0]) {\n                break;\n            }\n        }\n    }\n    TRANSPOS_TAB[boardHash] = v[1];\n    return v;\n\n}\n\nfunction aiMove(state) {\n    return minPlayer(state, -Infinity, Infinity, 0)[1];\n}\n\nfunction zobrist() {\n    let res = new Uint32Array(2*L*L);\n    for (let i = 0; i < res.length; i++) {\n        res[i] = Math.random() * 4294967296;\n    }\n    return res;\n}\n\nfunction hash(state) {\n    let h = 0;\n    for (let i = 0; i < state.length; i++) {\n        if (state[i]) {\n            const j = state[i] === 'X' ? 0 : 1;\n            h ^= RANDTAB[i*2+j];\n        }\n    }\n    return h;\n}"],"sourceRoot":""}