{"version":3,"sources":["index.js"],"names":["L","LINES","calculateLines","SIXES","SEVENS","Square","props","name","sqState","isWinner","lastMove","className","cur-piece","curPiece","onClick","value","Restart","title","modalMsg","mode","isOpen","modal","toggle","color","reset","Board","state","squares","Array","fill","xIsNext","winner","spotsOccupied","openModal","selectedMode","i","this","slice","setState","calculateWinner","key","toString","includes","handleClick","board","row","j","push","renderSquare","window","setTimeout","move","minPlayer","Infinity","status","alertColor","thinking","size","renderBoard","e","React","Component","Game","makeDiags","start","n","d","res","counter","arr","count","forEach","x","k","col","col1","col2","row1","row2","length","every","four","map","straightFour","line","three","sLine","sLine1","sLine2","count1","count2","s","sl","filter","brokenThree","terminal","actions","threatSpace","checkRow","checkCol","util","found","xActionUtil","utility","result","oActionUtil","action","player","bt","t","f","sf","maxPlayer","alpha","beta","depth","v","minVal","maxVal","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ca85efc.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Alert, Button, Modal, ModalHeader, ModalBody, ModalFooter, Spinner } from \"reactstrap\";\nimport './index.css';\n\nconst L = 15;\nconst LINES = calculateLines(5);\nconst SIXES = calculateLines(6);\nconst SEVENS = calculateLines(7);\n\nfunction Square(props) {\n    let name = props.sqState ? 'square ' + props.sqState : 'square unclicked';\n    if (props.isWinner) name = name + ' is-winner';\n    if (props.lastMove) name = name + ' last-move';\n    return (\n        <button className={name} cur-piece={props.curPiece} onClick={() => props.onClick()}>\n            {props.value}\n        </button>\n    );\n}\n\nfunction Restart(props) {\n    let title, modalMsg;\n    if (props.mode === 'default') {\n        title = 'Play With a Friend';\n        modalMsg = 'Are you sure you want to restart?';\n    } else if (props.mode === 'ai') {\n        title = 'Play Against Computer';\n        modalMsg = 'Are you sure you want to play against computer?';\n    }\n    return (\n        <Modal isOpen={props.modal} toggle={props.toggle}>\n            <ModalHeader toggle={props.toggle}>{title}</ModalHeader>\n            <ModalBody>\n                {modalMsg}\n            </ModalBody>\n            <ModalFooter>\n                <Button color=\"primary\" onClick={props.reset}>Yes</Button>{' '}\n                <Button color=\"secondary\" onClick={props.toggle}>Cancel</Button>\n            </ModalFooter>\n        </Modal>\n    )\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(L * L).fill(null),\n            xIsNext: true,\n            winner: null,\n            spotsOccupied: 0,\n            openModal: false,\n            mode: 'ai',\n            selectedMode: null,\n            lastMove: null\n        };\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        if (this.state.winner || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n            winner: calculateWinner(squares),\n            spotsOccupied: this.state.spotsOccupied + 1,\n            lastMove: i\n        });\n    }\n\n    toggle(mode) {\n        this.setState({openModal: !this.state.openModal, selectedMode: mode});\n    }\n\n    reset(mode) {\n        this.setState({\n            squares: Array(L*L).fill(null),\n            xIsNext: true,\n            winner: null,\n            spotsOccupied: 0,\n            openModal: false,\n            mode: mode,\n            selectedMode: null,\n            lastMove: null\n        })\n    }\n\n    renderSquare(i) {\n        return (\n            <Square\n                key={'square'+i.toString()}\n                curPiece={this.state.xIsNext ? 'X' : 'O'}\n                value={this.state.squares[i]}\n                sqState={!!this.state.squares[i] ? 'clicked-' + this.state.squares[i] : null}\n                isWinner={this.state.winner && this.state.winner[1].includes(i)}\n                lastMove={!this.state.winner && this.state.lastMove === i}\n                onClick={() => this.handleClick(i)}\n            />\n        );\n    }\n\n    renderBoard() {\n        const board = [];\n        for (let i = 0; i < L; i++) {\n            let row = [];\n            for (let j = i * L; j < L * (i + 1); j++) {\n                row.push(this.renderSquare(j));\n            }\n            board.push(<div className=\"board-row\" key={'row'+i.toString()}>{row}</div>);\n        }\n        return board;\n    }\n\n    componentDidUpdate() {\n        if (this.state.mode === 'ai' && !this.state.xIsNext) {\n            window.setTimeout((move) => this.handleClick(aiMove(this.state.squares)), 500);\n        }\n    }\n\n    render() {\n        // console.log(utility(this.state.squares))\n        // console.log('broken three: ' + brokenThree(this.state.squares))\n        //  console.log('four: ' + four(this.state.squares))\n        //  console.log('three: ' + three(this.state.squares))\n        //  console.log('straight four: ' + straightFour(this.state.squares))\n\n        let status, alertColor;\n        if (this.state.winner) {\n            status = 'Winner: ' + this.state.winner[0];\n            alertColor = this.state.winner[0] === 'X' ? 'success' : 'danger';\n        } else if (this.state.spotsOccupied === L * L) {\n            status = 'Game ended in a draw';\n        } else if (this.state.mode === 'ai' && !this.state.xIsNext) {\n            status = 'Thinking...';\n            alertColor = 'info';\n        } else if (this.state.mode === 'ai') {\n            status = 'Human vs AI: your turn';\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n            alertColor = this.state.xIsNext ? 'info' : 'primary';\n        }\n        const thinking = this.state.mode === 'ai' && !this.state.xIsNext && !this.state.winner;\n\n        return (\n            <div>\n                <Alert color={alertColor}>\n                    {status}\n                    {thinking && <Spinner size=\"sm\" color=\"primary\" />}\n                </Alert>\n                {this.renderBoard()}\n                <div className=\"btn-options\">\n                    <Button color=\"info\" onClick={(e) => this.toggle('ai', e)}>PLAY COMPUTER</Button>{' '}\n                    <Button color=\"primary\" onClick={(e) => this.toggle('default', e)}>PLAY A FRIEND</Button>{' '}\n                </div>\n                <Restart\n                    modal={this.state.openModal}\n                    mode={this.state.selectedMode}\n                    reset={(e) => this.reset(this.state.selectedMode, e)}\n                    toggle={() => this.toggle()}\n                >\n                </Restart>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n                <div className=\"game-info\">\n                    <div>{/* status */}</div>\n                    <ol>{/* TODO */}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction makeDiags(start, n, d) {\n    const res = [];\n    for (let i = 0; i < n; i++) {\n        res.push(start + i * d)\n    }\n    return res;\n}\n\nfunction counter(arr) {\n    let count = {};\n    arr.forEach(x => count[x] = (count[x] || 0) + 1);\n    return count;\n}\n\nfunction calculateLines(n) {\n    const res = [];\n    for (let i = 0; i < L; i++) {\n        // get winning row lines\n        for (let j = i * L; j <= i * L + L - n; j++) {\n            const row = [];\n            for (let k = 0; k < n; k++) {\n                row.push(j + k);\n            }\n            res.push(row);\n        }\n        // get winning col lines\n        for (let j = i; j <= i + L * (L - n); j += L) {\n            const col = [];\n            for (let k = 0; k < n; k++) {\n                col.push(j + L * k);\n            }\n            res.push(col);\n        }\n        // get winning diag lines\n        for (let j = 0; j < L - n + 1 - i; j++) {\n            const d1 = L + 1;\n            const d2 = L - 1;\n            let col1 = i + d1 * j;\n            let col2 = d2 * (j + 1) - i;\n            let row1 = L * i + d1 * j;\n            let row2 = L * i + d2 * (j + 1);\n            res.push(makeDiags(col1, n, d1));\n            res.push(makeDiags(col2, n, d2));\n            res.push(makeDiags(row1, n, d1));\n            res.push(makeDiags(row2, n, d2));\n        }\n    }\n    return res;\n}\n\nfunction calculateWinner(squares) {\n    for (let i = 0; i < LINES.length; i++) {\n        if (squares[LINES[i][0]] && LINES[i].every( (x, i, arr) => squares[x] === squares[arr[0]])) {\n            return [squares[LINES[i][0]], LINES[i]]\n        }\n    }\n    return null;\n}\n\nfunction four(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < LINES.length; i++) {\n        const line = LINES[i].map(x => squares[x]);\n        const count = counter(line);\n        if (count['X'] === 4 && count[null] === 1) {\n            res[0] += 1;\n        } else if (count['O'] === 4 && count[null] === 1) {\n            res[1] += 1;\n            // console.log(LINES[i])\n            // console.log(LINES)\n        }\n    }\n    return res;\n}\n\nfunction straightFour(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < SIXES.length; i++) {\n        const line = SIXES[i];\n        const slice = line.slice(1, 5);\n        const isFour = squares[slice[0]] && slice.every((x, i, arr) => squares[x] === squares[arr[0]]);\n        if (isFour && !(squares[line[0]] || squares[line[5]])) {\n            if (squares[slice[0]] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n        }\n    }\n    return res;\n}\n\nfunction three(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < SEVENS.length; i++) {\n        const line = SEVENS[i];\n        const sLine = line.map(x => squares[x]);\n        const sLine1 = sLine.slice(0, 6);\n        const sLine2 = sLine.slice(1, 7);\n        const count = counter(sLine);\n        const count1 = counter(sLine1);\n        const count2 = counter(sLine2);\n        const slice = sLine.slice(2, 5);\n        const isThree = slice[0] && slice.every(x => x === slice[0]);\n        if (isThree && count[null] === 4) {\n            if (slice[0] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n            // console.log('three 2: ' + sLine + 'line: ' + line)\n            continue;\n        }\n        for (let s of [sLine1, sLine2]) {\n            const sl = s.slice(1, 5);\n            const counter = s === sLine1 ? count1 : count2;\n            if (counter[null] === 3 && sl.filter(x => x === sl[1]).length === 3 && (!(sl[0] && sl[4]))) {\n                if (sl[1] === 'X') {\n                    res[0] += 1;\n                } else if (sl[1] === 'O') {\n                    res[1] += 1;\n                }\n                // console.log('three 2: ' + s + 'line: ' + line)\n                break;\n            }\n        }\n    }\n    return res;\n}\n\nfunction brokenThree(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < SIXES.length; i++) {\n        const line = SIXES[i];\n        const sLine = line.map(x => squares[x]);\n        const count = counter(sLine);\n        const slice = sLine.slice(1, 5);\n        const isThree = slice[0] && slice[3] && slice.filter(x => x === slice[0]).length === 3;\n        if (isThree && count[null] === 3) {\n            if (slice[0] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n        }\n    }\n    return res;\n}\n\nfunction terminal(squares) {\n    return calculateWinner(squares) || !squares.includes(null);\n}\n\nfunction actions(squares) {\n    const res = [];\n    const threatSpace = [];\n    const checkRow = [0, L, -L];\n    const checkCol = [-1, 0, 1];\n    let util = 0;\n    for (let i = 0; i < squares.length; i++) {\n        if (!squares[i]) {\n            let found = false;\n            for (let row of checkRow) {\n                if (found) break;\n                for (let col of checkCol) {\n                    let n = i + row + col;\n                    if (n >= 0 && n < 255 && squares[n]) {\n                        res.push(i);\n                        found = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    for (let i of res) {\n        let xActionUtil = utility(result(squares, i, 'X'));\n        let oActionUtil = utility(result(squares, i, 'O'));\n        if (xActionUtil !== util || oActionUtil !== util) {\n            threatSpace.push(i);\n            util = xActionUtil !== util ? xActionUtil : oActionUtil;\n        }\n    }\n    // if (threatSpace.length > 0) console.log(threatSpace)\n    return threatSpace.length > 0 ? threatSpace : res;\n}\n\nfunction result(squares, action, player) {\n    const board = squares.slice();\n    board[action] = player;\n    return board;\n}\n\nfunction utility(squares) {\n    const winner = calculateWinner(squares);\n    if (winner) {\n        if (winner[0] === 'X') {\n            return 10000;\n        } else {\n            return -10000;\n        }\n    } else {\n        let bt, t, f, sf;\n        [bt, t, f, sf] = [brokenThree(squares), three(squares), four(squares), straightFour(squares)];\n        return 15 * (1.1*bt[0] - bt[1]) + 25 * (1.1*t[0] - t[1]) + 70 * (1.1*f[0] - f[1]) + 500 * (1.1*sf[0] - sf[1]);\n    }\n}\n\nfunction maxPlayer(squares, alpha, beta, depth) {\n    if (terminal(squares) || depth === 2) {\n        return [utility(squares), null];\n    }\n    let v = [alpha, null];\n    for (let action of actions(squares)) {\n        const minVal = minPlayer(result(squares, action, 'X'), v[0], beta, depth + 1);\n        if (minVal[0] > v[0]) {\n            v = [minVal[0], action];\n            if (v[0] >= beta) {\n                break;\n            }\n        }\n    }\n    return v;\n}\n\nfunction minPlayer(squares, alpha, beta, depth) {\n    if (terminal(squares) || depth === 2) {\n        return [utility(squares), null];\n    }\n    let v = [beta, null];\n    for (let action of actions(squares)) {\n        const maxVal = maxPlayer(result(squares, action, 'O'), alpha, v[0], depth + 1);\n        if (maxVal[0] < v[0]) {\n            v = [maxVal[0], action];\n            if (alpha >= v[0]) {\n                break;\n            }\n        }\n    }\n    // console.log(v);\n    return v;\n\n}\n\nfunction aiMove(state) {\n    return minPlayer(state, -Infinity, Infinity, 0)[1];\n}"],"sourceRoot":""}