{"version":3,"sources":["index.js"],"names":["L","LINES","calculateLines","SIXES","SEVENS","RANDTAB","res","Uint32Array","i","length","Math","random","zobrist","TRANSPOS_TAB","Square","props","name","sqState","isWinner","lastMove","className","cur-piece","curPiece","onClick","value","Restart","title","modalMsg","mode","isOpen","modal","toggle","color","reset","Board","state","squares","Array","fill","xIsNext","winner","spotsOccupied","openModal","selectedMode","this","slice","setState","calculateWinner","key","toString","includes","handleClick","board","row","j","push","renderSquare","window","setTimeout","move","minPlayer","Infinity","status","alertColor","thinking","size","renderBoard","e","React","Component","Game","makeDiags","start","n","d","counter","arr","count","forEach","x","k","col","col1","col2","row1","row2","every","four","map","straightFour","line","three","sLine","sLine1","sLine2","count1","count2","s","sl","filter","brokenThree","terminal","actions","threatSpace","checkRow","checkCol","util","utility","found","xActionUtil","result","oActionUtil","max","abs","sort","a","b","action","player","bt","t","f","sf","maxPlayer","alpha","beta","depth","hash","boardHash","curActs","v","minVal","maxVal","h","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a65d7bf.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Alert, Button, Modal, ModalHeader, ModalBody, ModalFooter, Spinner } from \"reactstrap\";\nimport './index.css';\n\nconst L = 15;\nconst LINES = calculateLines(5);\nconst SIXES = calculateLines(6);\nconst SEVENS = calculateLines(7);\nconst RANDTAB = zobrist();\nconst TRANSPOS_TAB = {};\n\nfunction Square(props) {\n    let name = props.sqState ? 'square ' + props.sqState : 'square unclicked';\n    if (props.isWinner) name = name + ' is-winner';\n    if (props.lastMove) name = name + ' last-move';\n    return (\n        <button className={name} cur-piece={props.curPiece} onClick={() => props.onClick()}>\n            {props.value}\n        </button>\n    );\n}\n\nfunction Restart(props) {\n    let title, modalMsg;\n    if (props.mode === 'default') {\n        title = 'Play With a Friend';\n        modalMsg = 'Are you sure you want to restart?';\n    } else if (props.mode === 'ai') {\n        title = 'Play Against Computer';\n        modalMsg = 'Are you sure you want to play against computer?';\n    }\n    return (\n        <Modal isOpen={props.modal} toggle={props.toggle}>\n            <ModalHeader toggle={props.toggle}>{title}</ModalHeader>\n            <ModalBody>\n                {modalMsg}\n            </ModalBody>\n            <ModalFooter>\n                <Button color=\"primary\" onClick={props.reset}>Yes</Button>{' '}\n                <Button color=\"secondary\" onClick={props.toggle}>Cancel</Button>\n            </ModalFooter>\n        </Modal>\n    )\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(L * L).fill(null),\n            xIsNext: true,\n            winner: null,\n            spotsOccupied: 0,\n            openModal: false,\n            mode: 'ai',\n            selectedMode: null,\n            lastMove: null,\n        };\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        if (this.state.winner || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n            winner: calculateWinner(squares),\n            spotsOccupied: this.state.spotsOccupied + 1,\n            lastMove: i\n        });\n    }\n\n    toggle(mode) {\n        this.setState({openModal: !this.state.openModal, selectedMode: mode});\n    }\n\n    reset(mode) {\n        this.setState({\n            squares: Array(L*L).fill(null),\n            xIsNext: true,\n            winner: null,\n            spotsOccupied: 0,\n            openModal: false,\n            mode: mode,\n            selectedMode: null,\n            lastMove: null\n        })\n    }\n\n    renderSquare(i) {\n        return (\n            <Square\n                key={'square'+i.toString()}\n                curPiece={this.state.xIsNext ? 'X' : 'O'}\n                value={this.state.squares[i]}\n                sqState={!!this.state.squares[i] ? 'clicked-' + this.state.squares[i] : null}\n                isWinner={this.state.winner && this.state.winner[1].includes(i)}\n                lastMove={!this.state.winner && this.state.lastMove === i}\n                onClick={() => this.handleClick(i)}\n            />\n        );\n    }\n\n    renderBoard() {\n        const board = [];\n        for (let i = 0; i < L; i++) {\n            let row = [];\n            for (let j = i * L; j < L * (i + 1); j++) {\n                row.push(this.renderSquare(j));\n            }\n            board.push(<div className=\"board-row\" key={'row'+i.toString()}>{row}</div>);\n        }\n        return board;\n    }\n\n    componentDidUpdate() {\n        if (this.state.mode === 'ai' && !this.state.xIsNext) {\n            window.setTimeout((move) => this.handleClick(aiMove(this.state.squares)), 500);\n        }\n    }\n\n    render() {\n        // console.log(actions(this.state.squares))\n        // console.log(utility(this.state.squares))\n        let status, alertColor;\n        if (this.state.winner) {\n            status = 'Winner: ' + this.state.winner[0];\n            alertColor = this.state.winner[0] === 'X' ? 'success' : 'danger';\n        } else if (this.state.spotsOccupied === L * L) {\n            status = 'Game ended in a draw';\n        } else if (this.state.mode === 'ai' && !this.state.xIsNext) {\n            status = 'Thinking...';\n            alertColor = 'info';\n        } else if (this.state.mode === 'ai') {\n            status = 'Human vs AI: your turn';\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n            alertColor = this.state.xIsNext ? 'info' : 'primary';\n        }\n        const thinking = this.state.mode === 'ai' && !this.state.xIsNext && !this.state.winner;\n\n        return (\n            <div>\n                <Alert color={alertColor}>\n                    {status}\n                    {thinking && <Spinner size=\"sm\" color=\"primary\" />}\n                </Alert>\n                {this.renderBoard()}\n                <div className=\"btn-options\">\n                    <Button color=\"info\" onClick={(e) => this.toggle('ai', e)}>PLAY COMPUTER</Button>{' '}\n                    <Button color=\"primary\" onClick={(e) => this.toggle('default', e)}>PLAY A FRIEND</Button>{' '}\n                </div>\n                <Restart\n                    modal={this.state.openModal}\n                    mode={this.state.selectedMode}\n                    reset={(e) => this.reset(this.state.selectedMode, e)}\n                    toggle={() => this.toggle()}\n                >\n                </Restart>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n                <div className=\"game-info\">\n                    <div>{/* status */}</div>\n                    <ol>{/* TODO */}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction makeDiags(start, n, d) {\n    const res = [];\n    for (let i = 0; i < n; i++) {\n        res.push(start + i * d)\n    }\n    return res;\n}\n\nfunction counter(arr) {\n    let count = {};\n    arr.forEach(x => count[x] = (count[x] || 0) + 1);\n    return count;\n}\n\nfunction calculateLines(n) {\n    const res = [];\n    for (let i = 0; i < L; i++) {\n        // row lines\n        for (let j = i * L; j <= i * L + L - n; j++) {\n            const row = [];\n            for (let k = 0; k < n; k++) {\n                row.push(j + k);\n            }\n            res.push(row);\n        }\n        // col lines\n        for (let j = i; j <= i + L * (L - n); j += L) {\n            const col = [];\n            for (let k = 0; k < n; k++) {\n                col.push(j + L * k);\n            }\n            res.push(col);\n        }\n        // diag lines\n        for (let j = 0; j < L - n + 1 - i; j++) {\n            const d1 = L + 1;\n            const d2 = L - 1;\n            let col1 = i + d1 * j;\n            let col2 = d2 * (j + 1) - i;\n            let row1 = L * i + d1 * j;\n            let row2 = L * i + d2 * (j + 1);\n            res.push(makeDiags(col1, n, d1));\n            res.push(makeDiags(col2, n, d2));\n            res.push(makeDiags(row1, n, d1));\n            res.push(makeDiags(row2, n, d2));\n        }\n    }\n    return res;\n}\n\nfunction calculateWinner(squares) {\n    for (let i = 0; i < LINES.length; i++) {\n        if (squares[LINES[i][0]] && LINES[i].every( (x, i, arr) => squares[x] === squares[arr[0]])) {\n            return [squares[LINES[i][0]], LINES[i]]\n        }\n    }\n    return null;\n}\n\nfunction four(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < LINES.length; i++) {\n        const line = LINES[i].map(x => squares[x]);\n        const count = counter(line);\n        if (count['X'] === 4 && count[null] === 1) {\n            res[0] += 1;\n        } else if (count['O'] === 4 && count[null] === 1) {\n            res[1] += 1;\n        }\n    }\n    return res;\n}\n\nfunction straightFour(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < SIXES.length; i++) {\n        const line = SIXES[i];\n        const slice = line.slice(1, 5);\n        const isFour = squares[slice[0]] && slice.every((x, i, arr) => squares[x] === squares[arr[0]]);\n        if (isFour && !(squares[line[0]] || squares[line[5]])) {\n            if (squares[slice[0]] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n        }\n    }\n    return res;\n}\n\nfunction three(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < SEVENS.length; i++) {\n        const line = SEVENS[i];\n        const sLine = line.map(x => squares[x]);\n        const sLine1 = sLine.slice(0, 6);\n        const sLine2 = sLine.slice(1, 7);\n        const count = counter(sLine);\n        const count1 = counter(sLine1);\n        const count2 = counter(sLine2);\n        const slice = sLine.slice(2, 5);\n        const isThree = slice[0] && slice.every(x => x === slice[0]);\n        if (isThree && count[null] === 4) {\n            if (slice[0] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n            continue;\n        }\n        for (let s of [sLine1, sLine2]) {\n            const sl = s.slice(1, 5);\n            const counter = s === sLine1 ? count1 : count2;\n            if (counter[null] === 3 && sl.filter(x => x === sl[1]).length === 3 && (!(sl[0] && sl[4]))) {\n                if (sl[1] === 'X') {\n                    res[0] += 1;\n                } else if (sl[1] === 'O') {\n                    res[1] += 1;\n                }\n                break;\n            }\n        }\n    }\n    return res;\n}\n\nfunction brokenThree(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < SIXES.length; i++) {\n        const line = SIXES[i];\n        const sLine = line.map(x => squares[x]);\n        const count = counter(sLine);\n        const slice = sLine.slice(1, 5);\n        const isThree = slice[0] && slice[3] && slice.filter(x => x === slice[0]).length === 3;\n        if (isThree && count[null] === 3) {\n            if (slice[0] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n        }\n    }\n    return res;\n}\n\nfunction terminal(squares) {\n    return calculateWinner(squares) || !squares.includes(null);\n}\n\nfunction actions(squares) {\n    const res = [];\n    let threatSpace = [];\n    const checkRow = [0, L, -L];\n    const checkCol = [-1, 0, 1];\n    let util = utility(squares);\n    for (let i = 0; i < squares.length; i++) {\n        if (!squares[i]) {\n            let found = false;\n            for (let row of checkRow) {\n                if (found) break;\n                for (let col of checkCol) {\n                    let n = i + row + col;\n                    if (n >= 0 && n < 255 && squares[n]) {\n                        res.push(i);\n                        found = true;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    for (let i of res) {\n        let xActionUtil = utility(result(squares, i, 'X'));\n        let oActionUtil = utility(result(squares, i, 'O'));\n        if (xActionUtil !== util || oActionUtil !== util) {\n            threatSpace.push([i, Math.max(Math.abs(xActionUtil-util), Math.abs(oActionUtil-util))]);\n        }\n    }\n    threatSpace = threatSpace.sort((a,b) => b[1]-a[1]);\n    return threatSpace.length > 0 ? threatSpace.map(x => x[0]).slice(0, 3) : res.slice(0, 3);\n}\n\nfunction result(squares, action, player) {\n    const board = squares.slice();\n    board[action] = player;\n    return board;\n}\n\nfunction utility(squares) {\n    const winner = calculateWinner(squares);\n    if (winner) {\n        return winner[0] === 'X' ? Infinity : -Infinity;\n    } else {\n        let bt, t, f, sf;\n        [bt, t, f, sf] = [brokenThree(squares), three(squares), four(squares), straightFour(squares)];\n        return 15 * (bt[0] - bt[1]) + 25 * (t[0] - t[1]) + 70 * (f[0] - f[1]) + 500 * (sf[0] - sf[1]);\n    }\n}\n\nfunction maxPlayer(squares, alpha, beta, depth) {\n    if (terminal(squares) || depth === 4) {\n        return [utility(squares), null];\n    }\n    const [boardHash, curActs] = [hash(squares), actions(squares)];\n    let v = [alpha, curActs[0]];\n    if (boardHash in TRANSPOS_TAB) return [alpha, TRANSPOS_TAB[boardHash]];\n    for (let action of curActs) {\n        const minVal = minPlayer(result(squares, action, 'X'), v[0], beta, depth + 1);\n        if (minVal[0] > v[0]) {\n            v = [minVal[0], action];\n            if (v[0] >= beta) {\n                break;\n            }\n        }\n    }\n    TRANSPOS_TAB[boardHash] = v[1];\n    return v;\n}\n\nfunction minPlayer(squares, alpha, beta, depth) {\n    if (terminal(squares) || depth === 4) {\n        return [utility(squares), null];\n    }\n    const [boardHash, curActs] = [hash(squares), actions(squares)];\n    let v = [beta, curActs[0]];\n    if (boardHash in TRANSPOS_TAB) return [beta, TRANSPOS_TAB[boardHash]];\n    for (let action of curActs) {\n        const maxVal = maxPlayer(result(squares, action, 'O'), alpha, v[0], depth + 1);\n        if (maxVal[0] < v[0]) {\n            v = [maxVal[0], action];\n            if (alpha >= v[0]) {\n                break;\n            }\n        }\n    }\n    TRANSPOS_TAB[boardHash] = v[1];\n    return v;\n\n}\n\nfunction aiMove(state) {\n    return minPlayer(state, -Infinity, Infinity, 0)[1];\n}\n\nfunction zobrist() {\n    let res = new Uint32Array(2*L*L);\n    for (let i = 0; i < res.length; i++) {\n        res[i] = Math.random() * 4294967296;\n    }\n    return res;\n}\n\nfunction hash(state) {\n    let h = 0;\n    for (let i = 0; i < state.length; i++) {\n        if (state[i]) {\n            const j = state[i] === 'X' ? 0 : 1;\n            h ^= RANDTAB[i*2+j];\n        }\n    }\n    return h;\n}"],"sourceRoot":""}