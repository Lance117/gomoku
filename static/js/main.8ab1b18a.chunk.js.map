{"version":3,"sources":["index.js"],"names":["L","Square","props","name","sqState","isWinner","className","cur-piece","curPiece","onClick","value","Restart","title","mode","isOpen","modal","toggle","color","reset","Board","state","squares","Array","fill","xIsNext","winner","spotsOccupied","openModal","selectedMode","i","this","slice","setState","calculateWinner","key","toString","includes","handleClick","board","row","j","push","renderSquare","length","pivot","Math","floor","random","aiMove","status","renderBoard","e","React","Component","Game","lines","res","col1","col2","row1","row2","d1","d2","calculateLines","a","b","c","d","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ab1b18a.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport './index.css';\n\nconst L = 15;\n\nfunction Square(props) {\n    let name = props.sqState ? 'square ' + props.sqState : 'square unclicked';\n    if (props.isWinner) name = name + ' is-winner';\n    return (\n        <button className={name} cur-piece={props.curPiece} onClick={() => props.onClick()}>\n            {props.value}\n        </button>\n    );\n}\n\nfunction Restart(props) {\n    let title;\n    if (props.mode === 'default') {\n        title = 'Single Player Mode';\n    } else if (props.mode === 'ai') {\n        title = 'Play Against Computer';\n    }\n    return (\n        <Modal isOpen={props.modal} toggle={props.toggle}>\n            <ModalHeader toggle={props.toggle}>{title}</ModalHeader>\n            <ModalBody>\n               Are you sure you want to restart? \n            </ModalBody>\n            <ModalFooter>\n                <Button color=\"primary\" onClick={props.reset}>Restart</Button>{' '}\n                <Button color=\"secondary\" onClick={props.toggle}>Cancel</Button>\n            </ModalFooter>\n        </Modal>\n    )\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(L * L).fill(null),\n            xIsNext: true,\n            winner: null,\n            spotsOccupied: 0,\n            openModal: false,\n            mode: 'default',\n            selectedMode: null,\n        };\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        if (this.state.winner || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n            winner: calculateWinner(squares),\n            spotsOccupied: this.state.spotsOccupied + 1\n        });\n    }\n\n    toggle(mode) {\n        this.setState({openModal: !this.state.openModal, selectedMode: mode});\n    }\n\n    reset(mode) {\n        this.setState({\n            squares: Array(L*L).fill(null),\n            xIsNext: true,\n            winner: null,\n            spotsOccupied: 0,\n            openModal: false,\n            mode: mode,\n            selectedMode: null\n        })\n    }\n\n    renderSquare(i) {\n        return (\n            <Square\n                key={'square'+i.toString()}\n                curPiece={this.state.xIsNext ? 'X' : 'O'}\n                value={this.state.squares[i]}\n                sqState={!!this.state.squares[i] ? 'clicked-' + this.state.squares[i] : null}\n                isWinner={this.state.winner && this.state.winner[1].includes(i)}\n                onClick={() => this.handleClick(i)}\n            />\n        );\n    }\n\n    renderBoard() {\n        const board = [];\n        for (let i = 0; i < L; i++) {\n            let row = [];\n            for (let j = i * L; j < L * (i + 1); j++) {\n                row.push(this.renderSquare(j));\n            }\n            board.push(<div className=\"board-row\" key={'row'+i.toString()}>{row}</div>);\n        }\n        return board;\n    }\n\n    componentDidUpdate() {\n        if (this.state.mode === 'ai' && !this.state.xIsNext) {\n            this.handleClick(aiMove(this.state.squares, this.state.spotsOccupied));\n        }\n    }\n\n    render() {\n        let status;\n        if (this.state.winner) {\n            status = 'Winner: ' + this.state.winner[0];\n        } else if (this.state.spotsOccupied === L * L) {\n            status = 'Game ended in a draw';\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div>\n                <div className=\"status\">{status}</div>\n                {this.renderBoard()}\n                <div className=\"btn-options\">\n                    <Button color=\"primary\" onClick={(e) => this.toggle('default', e)}>RESTART GAME</Button>{' '}\n                    <Button color=\"info\" onClick={(e) => this.toggle('ai', e)}>PLAY COMPUTER</Button>{' '}\n                </div>\n                <Restart\n                    modal={this.state.openModal}\n                    mode={this.state.selectedMode}\n                    reset={(e) => this.reset(this.state.selectedMode, e)}\n                    toggle={() => this.toggle()}\n                >\n                </Restart>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n                <div className=\"game-info\">\n                    <div>{/* status */}</div>\n                    <ol>{/* TODO */}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateLines() {\n    const res = [];\n    for (let i = 0; i < L; i++) {\n        // get winning row lines\n        for (let j = i * L; j <= i * L + L - 5; j++) {\n            res.push([j, j+1, j+2, j+3, j+4]);\n        }\n        // get winning col lines\n        for (let j = i; j <= i + L * 10; j += L) {\n            res.push([j, j+L, j+L*2, j+L*3, j+L*4]);\n        }\n        // get winning diag lines\n        for (let j = 0; j <= L - 4 - i; j++) {\n            const d1 = L + 1;\n            const d2 = L - 1;\n            let col1 = i + d1 * j;\n            let col2 = d2 * (j + 1) - i;\n            let row1 = L * i + d1 * j;\n            let row2 = L * i + d2 * (j + 1);\n            res.push([col1, col1+d1, col1+d1*2, col1+d1*3, col1+d1*4]);\n            res.push([col2, col2+d2, col2+d2*2, col2+d2*3, col2+d2*4]);\n            res.push([row1, row1+d1, row1+d1*2, row1+d1*3, row1+d1*4]);\n            res.push([row2, row2+d2, row2+d2*2, row2+d2*3, row2+d2*4]);\n        }\n    }\n    return res;\n}\n\nfunction calculateWinner(squares) {\n    const lines = calculateLines();\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c, d, e] = lines[i];\n        if (\n            squares[a] &&\n            squares[a] === squares[b] &&\n            squares[a] === squares[c] &&\n            squares[a] === squares[d] &&\n            squares[a] === squares[e]\n        ) {\n            return [squares[a], lines[i]];\n        }\n    }\n    return null;\n}\n\nfunction aiMove(state, spotsOccupied) {\n    const squares = state.slice();\n    if (squares.length === spotsOccupied) return null;\n    let pivot = squares.length - 1;\n    for (let i = 0; i < squares.length - spotsOccupied; i++) {\n        if (squares[i]) {\n            [squares[i], squares[pivot]] = [squares[pivot], squares[i]];\n            pivot -= 1;\n        }\n    }\n    return Math.floor(Math.random() * (squares.length - spotsOccupied));\n}"],"sourceRoot":""}