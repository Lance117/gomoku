{"version":3,"sources":["index.js"],"names":["L","LINES","calculateLines","SIXES","SEVENS","Square","props","name","sqState","isWinner","className","cur-piece","curPiece","onClick","value","Restart","title","mode","isOpen","modal","toggle","color","reset","Board","state","squares","Array","fill","xIsNext","winner","spotsOccupied","openModal","selectedMode","i","this","slice","setState","calculateWinner","key","toString","includes","handleClick","board","row","j","push","renderSquare","window","setTimeout","move","minPlayer","Infinity","status","thinking","size","renderBoard","e","React","Component","Game","makeDiags","start","n","d","res","k","col","col1","col2","row1","row2","length","every","x","arr","four","line","map","sort","filter","straightFour","three","sLine","brokenThree","terminal","actions","result","action","player","utility","bt","t","f","sf","maxPlayer","alpha","beta","depth","v","minVal","maxVal","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24bc1065.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Spinner } from \"reactstrap\";\nimport './index.css';\n\nconst L = 15;\nconst LINES = calculateLines(5);\nconst SIXES = calculateLines(6);\nconst SEVENS = calculateLines(7);\n\nfunction Square(props) {\n    let name = props.sqState ? 'square ' + props.sqState : 'square unclicked';\n    if (props.isWinner) name = name + ' is-winner';\n    return (\n        <button className={name} cur-piece={props.curPiece} onClick={() => props.onClick()}>\n            {props.value}\n        </button>\n    );\n}\n\nfunction Restart(props) {\n    let title;\n    if (props.mode === 'default') {\n        title = 'Single Player Mode';\n    } else if (props.mode === 'ai') {\n        title = 'Play Against Computer';\n    }\n    return (\n        <Modal isOpen={props.modal} toggle={props.toggle}>\n            <ModalHeader toggle={props.toggle}>{title}</ModalHeader>\n            <ModalBody>\n               Are you sure you want to restart? \n            </ModalBody>\n            <ModalFooter>\n                <Button color=\"primary\" onClick={props.reset}>Restart</Button>{' '}\n                <Button color=\"secondary\" onClick={props.toggle}>Cancel</Button>\n            </ModalFooter>\n        </Modal>\n    )\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(L * L).fill(null),\n            xIsNext: true,\n            winner: null,\n            spotsOccupied: 0,\n            openModal: false,\n            mode: 'default',\n            selectedMode: null,\n        };\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        if (this.state.winner || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n            winner: calculateWinner(squares),\n            spotsOccupied: this.state.spotsOccupied + 1\n        });\n    }\n\n    toggle(mode) {\n        this.setState({openModal: !this.state.openModal, selectedMode: mode});\n    }\n\n    reset(mode) {\n        this.setState({\n            squares: Array(L*L).fill(null),\n            xIsNext: true,\n            winner: null,\n            spotsOccupied: 0,\n            openModal: false,\n            mode: mode,\n            selectedMode: null\n        })\n    }\n\n    renderSquare(i) {\n        return (\n            <Square\n                key={'square'+i.toString()}\n                curPiece={this.state.xIsNext ? 'X' : 'O'}\n                value={this.state.squares[i]}\n                sqState={!!this.state.squares[i] ? 'clicked-' + this.state.squares[i] : null}\n                isWinner={this.state.winner && this.state.winner[1].includes(i)}\n                onClick={() => this.handleClick(i)}\n            />\n        );\n    }\n\n    renderBoard() {\n        const board = [];\n        for (let i = 0; i < L; i++) {\n            let row = [];\n            for (let j = i * L; j < L * (i + 1); j++) {\n                row.push(this.renderSquare(j));\n            }\n            board.push(<div className=\"board-row\" key={'row'+i.toString()}>{row}</div>);\n        }\n        return board;\n    }\n\n    componentDidUpdate() {\n        if (this.state.mode === 'ai' && !this.state.xIsNext) {\n            window.setTimeout((move) => this.handleClick(aiMove(this.state.squares)), 1);\n        }\n    }\n\n    render() {\n        let status;\n        if (this.state.winner) {\n            status = 'Winner: ' + this.state.winner[0];\n        } else if (this.state.spotsOccupied === L * L) {\n            status = 'Game ended in a draw';\n        } else if (this.state.mode === 'ai' && !this.state.xIsNext) {\n            status = 'Thinking...'\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n        const thinking = this.state.mode === 'ai' && !this.state.xIsNext && !this.state.winner;\n\n        return (\n            <div>\n                <div className=\"status\">\n                    {status}\n                    {thinking && <Spinner size=\"sm\" color=\"primary\" />}\n                </div>\n                {this.renderBoard()}\n                <div className=\"btn-options\">\n                    <Button color=\"primary\" onClick={(e) => this.toggle('default', e)}>RESTART GAME</Button>{' '}\n                    <Button color=\"info\" onClick={(e) => this.toggle('ai', e)}>PLAY COMPUTER</Button>{' '}\n                </div>\n                <Restart\n                    modal={this.state.openModal}\n                    mode={this.state.selectedMode}\n                    reset={(e) => this.reset(this.state.selectedMode, e)}\n                    toggle={() => this.toggle()}\n                >\n                </Restart>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n                <div className=\"game-info\">\n                    <div>{/* status */}</div>\n                    <ol>{/* TODO */}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction makeDiags(start, n, d) {\n    const res = [];\n    for (let i = 0; i < n; i++) {\n        res.push(start + i * d)\n    }\n    return res;\n}\n\nfunction calculateLines(n) {\n    const res = [];\n    for (let i = 0; i < L; i++) {\n        // get winning row lines\n        for (let j = i * L; j <= i * L + L - n; j++) {\n            const row = [];\n            for (let k = 0; k < n; k++) {\n                row.push(j + k);\n            }\n            res.push(row);\n        }\n        // get winning col lines\n        for (let j = i; j <= i + L * (L - n); j += L) {\n            const col = [];\n            for (let k = 0; k < n; k++) {\n                col.push(j + L * k);\n            }\n            res.push(col);\n        }\n        // get winning diag lines\n        for (let j = 0; j < L - n - 1 - i; j++) {\n            const d1 = L + 1;\n            const d2 = L - 1;\n            let col1 = i + d1 * j;\n            let col2 = d2 * (j + 1) - i;\n            let row1 = L * i + d1 * j;\n            let row2 = L * i + d2 * (j + 1);\n            res.push(makeDiags(col1, n, d1));\n            res.push(makeDiags(col2, n, d2));\n            res.push(makeDiags(row1, n, d1));\n            res.push(makeDiags(row2, n, d2));\n        }\n    }\n    return res;\n}\n\nfunction calculateWinner(squares) {\n    for (let i = 0; i < LINES.length; i++) {\n        if (squares[LINES[i][0]] && LINES[i].every( (x, i, arr) => squares[x] === squares[arr[0]])) {\n            return [squares[LINES[i][0]], LINES[i]]\n        }\n    }\n    return null;\n}\n\nfunction four(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < LINES.length; i++) {\n        const lineNum = LINES[i];\n        const line = lineNum.map(x => squares[x]).sort();\n        if (line[0] && line.filter(x => x === line[0]).length === 4 && !line[4]) {\n            if (line[0] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n        }\n    }\n    return res;\n}\n\nfunction straightFour(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < SIXES.length; i++) {\n        const line = SIXES[i];\n        const slice = line.slice(1, 5);\n        const isFour = squares[slice[0]] && slice.every((x, i, arr) => squares[x] === squares[arr[0]]);\n        if (isFour && !(squares[line[0]] || squares[line[5]])) {\n            if (squares[slice[0]] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n        }\n    }\n    return res;\n}\n\nfunction three(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < SEVENS.length; i++) {\n        const line = SEVENS[i];\n        const sLine = line.map(x => squares[x]);\n        const slice = line.slice(2, 5);\n        const isThree = squares[slice[0]] && slice.every((x, i, arr) => squares[x] === squares[arr[0]]);\n        if (isThree && sLine.filter(x => x === null).length === 4) {\n            if (squares[slice[0]] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n        }\n    }\n    for (let i = 0; i < SIXES.length; i++) {\n        const line = SIXES[i];\n        const sLine = line.map(x => squares[x]);\n        const slice = line.slice(1, 4);\n        const isThree = squares[slice[0]] && slice.every((x, i, arr) => squares[x] === squares[arr[0]]);\n        if (isThree && sLine.filter(x => x === null).length === 3) {\n            if (squares[slice[0]] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n        }\n    }\n    return res;\n}\n\nfunction brokenThree(squares) {\n    const res = [0, 0];\n    for (let i = 0; i < SIXES.length; i++) {\n        const line = SIXES[i];\n        const slice = line.slice(1, 5);\n        const sLine = slice.map(x => squares[x]).sort();\n        const isThree = sLine[0] && sLine.filter(x => x === sLine[0]).length === 3 && !sLine[4];\n        if (isThree && !(squares[line[0]] || squares[line[5]])) {\n            if (squares[slice[0]] === 'X') {\n                res[0] += 1;\n            } else {\n                res[1] += 1;\n            }\n        }\n    }\n    return res;\n}\n\nfunction terminal(squares) {\n    return calculateWinner(squares) || !squares.includes(null);\n}\n\nfunction actions(squares) {\n    const res = [];\n    for (let i = 0; i < squares.length; i++) {\n        if (!squares[i]) res.push(i);\n    }\n    return res;\n}\n\nfunction result(squares, action, player) {\n    const board = squares.slice();\n    board[action] = player;\n    return board;\n}\n\nfunction utility(squares) {\n    const winner = calculateWinner(squares);\n    if (winner) {\n        if (winner[0] === 'X') {\n            return Infinity;\n        } else {\n            return -Infinity;\n        }\n    } else {\n        let bt, t, f, sf;\n        [bt, t, f, sf] = [brokenThree(squares), three(squares), four(squares), straightFour(squares)];\n        return bt[0] - bt[1] + 10 * (t[0] - t[1]) + 100 * (f[0] - f[1]) + 1000 * (sf[0] - sf[1]);\n    }\n}\n\nfunction maxPlayer(squares, alpha, beta, depth) {\n    if (terminal(squares) || depth === 2) {\n        return [utility(squares), null];\n    }\n    let v = [alpha, null];\n    for (let action of actions(squares)) {\n        const minVal = minPlayer(result(squares, action, 'X'), v[0], beta, depth + 1);\n        if (minVal[0] > v[0]) {\n            v = [minVal[0], action];\n            if (v[0] >= beta) {\n                break;\n            }\n        }\n    }\n    return v;\n}\n\nfunction minPlayer(squares, alpha, beta, depth) {\n    if (terminal(squares) || depth === 2) {\n        return [utility(squares), null];\n    }\n    let v = [beta, null];\n    for (let action of actions(squares)) {\n        const maxVal = maxPlayer(result(squares, action, 'O'), alpha, v[0], depth + 1);\n        if (maxVal[0] < v[0]) {\n            v = [maxVal[0], action];\n            if (alpha >= v[0]) {\n                break;\n            }\n        }\n    }\n    return v;\n\n}\n\nfunction aiMove(state) {\n    return minPlayer(state, -Infinity, Infinity, 0)[1];\n}"],"sourceRoot":""}