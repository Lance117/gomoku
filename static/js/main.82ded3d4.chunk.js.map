{"version":3,"sources":["index.js"],"names":["Square","props","name","status","isWinner","className","onClick","value","Restart","title","mode","isOpen","modal","toggle","color","reset","Board","state","squares","Array","fill","xIsNext","winner","numSquares","openModal","selectedMode","i","this","slice","setState","calculateWinner","includes","handleClick","board","row","j","push","renderSquare","renderBoard","e","React","Component","Game","lines","res","col1","col2","row1","row2","calculateLines","length","a","b","c","d","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.82ded3d4.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport './index.css';\n\nfunction Square(props) {\n    let name = props.status ? 'square ' + props.status : 'square unclicked';\n    if (props.isWinner) name = name + ' is-winner';\n    return (\n        <button className={name} onClick={() => props.onClick()}>\n            {props.value}\n        </button>\n    );\n}\n\nfunction Restart(props) {\n    let title;\n    if (props.mode === 'default') {\n        title = 'Single Player Mode';\n    }\n    return (\n        <Modal isOpen={props.modal} toggle={props.toggle}>\n            <ModalHeader toggle={props.toggle}>{title}</ModalHeader>\n            <ModalBody>\n               Are you sure you want to restart? \n            </ModalBody>\n            <ModalFooter>\n                <Button color=\"primary\" onClick={props.reset}>Restart</Button>{' '}\n                <Button color=\"secondary\" onClick={props.toggle}>Cancel</Button>\n            </ModalFooter>\n        </Modal>\n    )\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(225).fill(null),\n            xIsNext: true,\n            winner: null,\n            numSquares: 225,\n            openModal: false,\n            mode: 'default',\n            selectedMode: null,\n        };\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        if (this.state.winner || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n            winner: calculateWinner(squares),\n            numSquares: this.state.numSquares - 1\n        });\n    }\n\n    toggle(mode) {\n        this.setState({openModal: !this.state.openModal, selectedMode: mode});\n    }\n\n    reset(mode) {\n        if (mode === 'default') {\n            this.setState({\n                squares: Array(225).fill(null),\n                xIsNext: true,\n                winner: null,\n                numSquares: 225,\n                openModal: false,\n                mode: 'default',\n                selectedMode: null\n            })\n        }\n    }\n\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.state.squares[i]}\n                status={!!this.state.squares[i] ? 'clicked-' + this.state.squares[i] : null}\n                isWinner={this.state.winner && this.state.winner[1].includes(i)}\n                onClick={() => this.handleClick(i)}\n            />\n        );\n    }\n\n    renderBoard() {\n        const board = [];\n        for (let i = 0; i < 15; i++) {\n            let row = [];\n            for (let j = i * 15; j < 15 * (i + 1); j++) {\n                row.push(this.renderSquare(j));\n            }\n            board.push(<div className=\"board-row\">{row}</div>);\n        }\n        return board;\n    }\n\n    render() {\n        let status;\n        if (this.state.winner) {\n            status = 'Winner: ' + this.state.winner[0];\n        } else if (this.state.numSquares === 0) {\n            status = 'Game ended in a draw';\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div>\n                <div className=\"status\">{status}</div>\n                {this.renderBoard()}\n                <div>\n                    <Button color=\"primary\" onClick={(e) => this.toggle('default', e)}>RESTART GAME</Button>{' '}\n                    <Button color=\"info\">PLAY COMPUTER</Button>{' '}\n                </div>\n                <Restart\n                    modal={this.state.openModal}\n                    mode={this.state.selectedMode}\n                    reset={(e) => this.reset(this.state.selectedMode, e)}\n                    toggle={() => this.toggle()}\n                >\n                </Restart>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n                <div className=\"game-info\">\n                    <div>{/* status */}</div>\n                    <ol>{/* TODO */}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateLines() {\n    const res = [];\n    for (let i = 0; i < 15; i++) {\n        // get winning row lines\n        for (let j = i * 15; j <= i * 15 + 10; j++) {\n            res.push([j, j+1, j+2, j+3, j+4]);\n        }\n        // get winning col lines\n        for (let j = i; j <= i + 150; j += 15) {\n            res.push([j, j+15, j+30, j+45, j+60]);\n        }\n        // get winning diag lines\n        for (let j = 0; j <= 11 - i; j++) {\n            let col1 = i + 16 * j;\n            res.push([col1, col1+16, col1+32, col1+48, col1+64]);\n            let col2 = 14 * (j + 1) - i;\n            res.push([col2, col2+14, col2+28, col2+42, col2+56]);\n            let row1 = 15 * i + 16 * j;\n            res.push([row1, row1+16, row1+32, row1+48, row1+64]);\n            let row2 = 15 * i + 14 * (j + 1);\n            res.push([row2, row2+14, row2+28, row2+42, row2+56]);\n        }\n    }\n    return res;\n}\n\nfunction calculateWinner(squares) {\n    const lines = calculateLines();\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c, d, e] = lines[i];\n        if (\n            squares[a] &&\n            squares[a] === squares[b] &&\n            squares[a] === squares[c] &&\n            squares[a] === squares[d] &&\n            squares[a] === squares[e]\n        ) {\n            return [squares[a], lines[i]];\n        }\n    }\n    return null;\n}"],"sourceRoot":""}