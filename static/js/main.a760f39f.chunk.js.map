{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","state","squares","Array","fill","xIsNext","i","this","slice","calculateWinner","setState","handleClick","board","row","j","push","renderSquare","status","winner","renderBoard","React","Component","Game","lines","rows","cols","concat","calculateLines","length","a","b","c","d","e","ReactDOM","render","document","getElementById"],"mappings":"2OAIA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAAS,kBAAMF,EAAME,YAC3CF,EAAMG,O,IAKbC,E,kDACF,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CACTC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJE,E,wDAQPC,GACR,IAAMJ,EAAUK,KAAKN,MAAMC,QAAQM,QAC/BC,EAAgBP,IAAYA,EAAQI,KAGxCJ,EAAQI,GAAKC,KAAKN,MAAMI,QAAU,IAAM,IACxCE,KAAKG,SAAS,CACVR,QAASA,EACTG,SAAUE,KAAKN,MAAMI,a,mCAIhBC,GAAI,IAAD,OACZ,OACI,kBAACX,EAAD,CACII,MAAOQ,KAAKN,MAAMC,QAAQI,GAC1BR,QAAS,kBAAM,EAAKa,YAAYL,Q,oCAOxC,IADA,IAAMM,EAAQ,GACLN,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAEzB,IADA,IAAIO,EAAM,GACDC,EAAQ,GAAJR,EAAQQ,EAAQ,GAAJR,EAAS,GAAIQ,IAClCD,EAAIE,KAAKR,KAAKS,aAAaF,IAE/BF,EAAMG,KAAK,yBAAKlB,UAAU,aAAagB,IAE3C,OAAOD,I,+BAIP,IACIK,EADEC,EAAST,EAAgBF,KAAKN,MAAMC,SAQ1C,OALIe,EADAC,EACS,WAAaA,EAEb,iBAAmBX,KAAKN,MAAMI,QAAU,IAAM,KAIvD,6BACI,yBAAKR,UAAU,UAAUoB,GACxBV,KAAKY,mB,GAtDFC,IAAMC,WA4DpBC,E,uKAEE,OACI,yBAAKzB,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACG,EAAD,OAEJ,yBAAKH,UAAU,aACX,8BACA,mC,GATDuB,IAAMC,WAuCzB,SAASZ,EAAgBP,GAErB,IADA,IAAMqB,EAjBV,WAGI,IAFA,IAAMC,EAAO,GACPC,EAAO,GACJnB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAEzB,IAAK,IAAIQ,EAAQ,GAAJR,EAAQQ,GAAS,GAAJR,EAAS,GAAIQ,IACnCU,EAAKT,KAAK,CAACD,EAAGA,EAAE,EAAGA,EAAE,EAAGA,EAAE,EAAGA,EAAE,IAGnC,IAAK,IAAIA,EAAIR,EAAGQ,GAAKR,EAAI,IAAKQ,GAAK,GAC/BW,EAAKV,KAAK,CAACD,EAAGA,EAAE,GAAIA,EAAE,GAAIA,EAAE,GAAIA,EAAE,KAG1C,OAAOU,EAAKE,OAAOD,GAILE,GACLrB,EAAI,EAAGA,EAAIiB,EAAMK,OAAQtB,IAAK,CAAC,IAAD,cACXiB,EAAMjB,GADK,GAC5BuB,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KACnBC,EADmB,KAChBC,EADgB,KAEnC,GACI/B,EAAQ2B,IACR3B,EAAQ2B,KAAO3B,EAAQ4B,IACvB5B,EAAQ2B,KAAO3B,EAAQ6B,IACvB7B,EAAQ2B,KAAO3B,EAAQ8B,IACvB9B,EAAQ2B,KAAO3B,EAAQ+B,GAEvB,OAAO/B,EAAQ2B,GAGvB,OAAO,KAnCXK,IAASC,OACL,kBAACb,EAAD,MACAc,SAASC,eAAe,W","file":"static/js/main.a760f39f.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={() => props.onClick()}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(9).fill(null),\n            xIsNext: true,\n        };\n    }\n\n    handleClick(i) {\n        const squares = this.state.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            squares: squares,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.state.squares[i]}\n                onClick={() => this.handleClick(i)}\n            />\n        );\n    }\n\n    renderBoard() {\n        const board = [];\n        for (let i = 0; i < 15; i++) {\n            let row = [];\n            for (let j = i * 15; j < i * 15 + 15; j++) {\n                row.push(this.renderSquare(j));\n            }\n            board.push(<div className=\"board-row\">{row}</div>);\n        }\n        return board;\n    }\n\n    render() {\n        const winner = calculateWinner(this.state.squares);\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return (\n            <div>\n                <div className=\"status\">{status}</div>\n                {this.renderBoard()}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n                <div className=\"game-info\">\n                    <div>{/* status */}</div>\n                    <ol>{/* TODO */}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction calculateLines() {\n    const rows = [];\n    const cols = [];\n    for (let i = 0; i < 15; i++) {\n        // get winning row lines\n        for (let j = i * 15; j <= i * 15 + 10; j++) {\n            rows.push([j, j+1, j+2, j+3, j+4]);\n        }\n        // get winning col lines\n        for (let j = i; j <= i + 150; j += 15) {\n            cols.push([j, j+15, j+30, j+45, j+60]);\n        }\n    }\n    return rows.concat(cols);\n}\n\nfunction calculateWinner(squares) {\n    const lines = calculateLines();\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c, d, e] = lines[i];\n        if (\n            squares[a] &&\n            squares[a] === squares[b] &&\n            squares[a] === squares[c] &&\n            squares[a] === squares[d] &&\n            squares[a] === squares[e]\n        ) {\n            return squares[a];\n        }\n    }\n    return null;\n}"],"sourceRoot":""}